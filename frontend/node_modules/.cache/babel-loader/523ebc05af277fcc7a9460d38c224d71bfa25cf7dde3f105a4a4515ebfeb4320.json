{"ast":null,"code":"import axios from 'axios';\n\n// Backend API URL - change this to match your backend server\nconst API_BASE_URL = 'http://localhost:8000/api';\nconst api = {\n  // Get all locations\n  getLocations: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/locations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching locations:', error);\n      throw error;\n    }\n  },\n  // Make a prediction\n  makePrediction: async predictionData => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/predict`, {\n        start_location_id: parseInt(predictionData.startLocationId),\n        end_location_id: parseInt(predictionData.endLocationId),\n        time_period: predictionData.timePeriod,\n        occasion: predictionData.occasion,\n        season: predictionData.season\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error making prediction:', error);\n      throw error;\n    }\n  },\n  // Get prediction history\n  getPredictionHistory: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/predictions/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching prediction history:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","getLocations","response","get","data","error","console","makePrediction","predictionData","post","start_location_id","parseInt","startLocationId","end_location_id","endLocationId","time_period","timePeriod","occasion","season","getPredictionHistory"],"sources":["/Users/sudheerreddynarra/Documents/Projects/bus_demand_prediction_enhanced/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Backend API URL - change this to match your backend server\nconst API_BASE_URL = 'http://localhost:8000/api';\n\nconst api = {\n  // Get all locations\n  getLocations: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/locations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching locations:', error);\n      throw error;\n    }\n  },\n  \n  // Make a prediction\n  makePrediction: async (predictionData) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/predict`, {\n        start_location_id: parseInt(predictionData.startLocationId),\n        end_location_id: parseInt(predictionData.endLocationId),\n        time_period: predictionData.timePeriod,\n        occasion: predictionData.occasion,\n        season: predictionData.season\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error making prediction:', error);\n      throw error;\n    }\n  },\n  \n  // Get prediction history\n  getPredictionHistory: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/predictions/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching prediction history:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAG;EACV;EACAC,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,YAAY,CAAC;MAC7D,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,cAAc,EAAE,MAAOC,cAAc,IAAK;IACxC,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACW,IAAI,CAAC,GAAGV,YAAY,UAAU,EAAE;QAC3DW,iBAAiB,EAAEC,QAAQ,CAACH,cAAc,CAACI,eAAe,CAAC;QAC3DC,eAAe,EAAEF,QAAQ,CAACH,cAAc,CAACM,aAAa,CAAC;QACvDC,WAAW,EAAEP,cAAc,CAACQ,UAAU;QACtCC,QAAQ,EAAET,cAAc,CAACS,QAAQ;QACjCC,MAAM,EAAEV,cAAc,CAACU;MACzB,CAAC,CAAC;MACF,OAAOhB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAc,oBAAoB,EAAE,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,sBAAsB,CAAC;MACvE,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeL,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}